# 临时邮箱获取功能改造计划

## 任务说明
当前项目使用的临时邮箱的方案已经不适用了，我们需要添加几个其他的临时邮箱的方案：

### 1. 支持的临时邮箱网址
1. https://22.do/inbox 
2. https://24mail.json.cm/
3. https://internxt.com/zh/temporary-email
4. https://spambox.xyz/mailbox

### 2. 实现要求
1. 方法适配不能进行大改动，只需要实现一个方法，这个方法有多个实现
2. get_temp_email(tab) 就像一个接口，有多个实现
3. 只修改这一部分的关键代码，不考虑其他问题
4. 已经有统一获取邮件的方式方法了，不需要修改
5. 不要过度设计

## 1. 需求说明
- 支持多个临时邮箱网站
- 保持现有接口不变
- 不修改 get_email_code.py
- 支持邮箱切换功能

## 2. 当前进度
### 2.1 已完成分析
- 22.do 网站的邮箱获取机制
- 邮箱切换功能的实现方式
- [x] 完成代码实现

### 2.2 待处理事项
- [x] 实现邮箱切换功能
- [x] 修改错误处理逻辑
- [ ] 测试功能

## 3. 实现计划
### 3.1 修改范围
- 只修改 cursor_pro_keep_alive.py 文件
- 只关注 get_temp_email 函数和邮箱切换功能
- 不修改 get_email_code.py

### 3.2 具体修改内容
1. 修改 get_temp_email 函数
   ```python
   def get_temp_email(tab):
       max_retries = 15
       last_email = None
       stable_count = 0
       
       # 根据URL选择对应的选择器
       selector = get_selector_for_url(tab.url)
       if not selector:
           raise ValueError("不支持的邮箱服务提供商")

       for i in range(max_retries):
           try:
               email_element = tab.ele(selector, timeout=3)
               if email_element:
                   current_email = get_email_value(email_element, tab.url)
                   if current_email and "@" in current_email:
                       if current_email == last_email:
                           stable_count += 1
                           if stable_count >= 2:
                               return current_email
                       else:
                           stable_count = 0
                           last_email = current_email
           except Exception as e:
               time.sleep(1)
               stable_count = 0
               
       raise ValueError("未能获取邮箱")
   ```

2. 添加选择器获取函数
   ```python
   def get_selector_for_url(url):
       if "22.do" in url:
           return "css:p.text-email"
       elif "24mail.json.cm" in url:
           return "css:input#shortId[disabled]"
       elif "internxt.com" in url:
           return "css:p[data-relingo-block='true']"
       elif "spambox.xyz" in url:
           return "css:div#email_id"
       return None
   ```

3. 添加邮箱值获取函数
   ```python
   def get_email_value(element, url):
       if "24mail.json.cm" in url:
           return element.attr("value")
       return element.text
   ```

4. 添加邮箱切换函数
   ```python
   def change_email(tab):
       try:
           # 点击 Change 按钮切换邮箱
           change_button = tab.ele("css:div#idChange")
           if change_button:
               change_button.click()
               time.sleep(2)  # 等待新邮箱生成
               return True
           return False
       except Exception as e:
           info(f"切换邮箱失败: {str(e)}")
           return False
   ```

5. 修改 sign_up_account 函数中的错误处理
   ```python
   def sign_up_account(browser, tab, account_info):
       # ... 现有代码 ...
       if result in ["EMAIL_USED", "SIGNUP_RESTRICTED", "VERIFY_FAILED"]:
           info(f"遇到问题: {result}，尝试切换邮箱...")
           if change_email(mail_tab):
               new_email = get_temp_email(mail_tab)
               if new_email:
                   account_info['email'] = new_email
                   info(f"邮箱已切换为: {new_email}")
                   return sign_up_account(browser, tab, account_info)
           info("切换邮箱失败")
           return result
   ```

### 3.3 测试计划
1. 基础功能测试
   - 邮箱获取是否正常
   - 邮箱切换是否成功
   - 新邮箱获取是否正确

2. 错误处理测试
   - EMAIL_USED 情况的处理
   - SIGNUP_RESTRICTED 情况的处理
   - VERIFY_FAILED 情况的处理

3. 稳定性测试
   - 多次切换邮箱的稳定性
   - 错误恢复的可靠性

## 4. 注意事项
1. 保持代码简洁
2. 确保错误处理完善
3. 添加必要的日志记录

## 5. 后续规划
- [ ] 分析其他临时邮箱网站的特点
- [ ] 实现其他网站的支持
- [ ] 优化切换邮箱的性能

## 6. 更新记录
- 2024-01-30: 创建初始计划
- 2024-01-30: 完成代码实现
  * 添加多邮箱服务提供商支持
  * 实现邮箱切换功能
  * 修改错误处理逻辑
- 2024-01-30: 修复问题
  * 修改默认邮箱服务为 22.do
  * 更新邮箱选择器和获取逻辑
  * 确保邮箱切换功能适配新服务
- 2024-01-30: 修复邮箱切换逻辑
  * 修改切换邮箱时不再重新打开标签页
  * 在同一标签页内完成邮箱切换
  * 优化标签页切换逻辑
- 2024-01-30: 实现 24mail.json.cm 支持
  * 修改默认邮箱服务为 24mail.json.cm
  * 使用 input#shortId[disabled] 选择器获取邮箱
  * 从 value 属性获取邮箱地址
  * 待验证邮箱切换功能
- 2024-01-30: 修复 24mail.json.cm 选择器问题
  * 修改为正确的选择器 input#shortid
  * 优化邮箱值获取逻辑，处理"正在分配"状态
  * 确保稳定性检查机制正常工作
- 待继续更新...

## 7. 待验证事项
- [ ] 22.do 邮箱获取功能
- [ ] 邮箱切换功能
- [ ] 错误处理机制
- [ ] 其他邮箱服务提供商的支持 